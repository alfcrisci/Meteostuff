/***************************************************************************
 *   Copyright (C) 2008-2009 Graziano Giuliani                             *
 *   graziano.giuliani at aquila.infn.it                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details. (see COPYING)            *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   LIC: GPL                                                              *
 *                                                                         *
 ***************************************************************************/

#include <cmath>
#include <complex>
#include <iostream>

#include <refindex.h>

using namespace cetemps;

double fppfp3(double, double, double, double);
double sum_debye(double, double, double, double, double);
double t2es(double);
double w2e(double, double);
double absgas(double, double, double, double);
std::complex <double> refice(double, double);
std::complex <double> aireps(double, double, double, double);

/* ****************************************************************
 *
 *  Computes epsilon (e'+je'') for liquid water 
 *
 *   INPUT
 *     ALAM = Wavelength in mm
 *     TEMP = Water temperature in K
 *
 *   OUTPUT
 *     Relative complex dielectric constant
 *
 *   Formula is taken from Ray's 1972 paper
 *
 **************************************************************** */

std::complex <double> cetemps::wateps(double alam, double temp)
{
  double calam = alam * 0.1;    // formula has wavelenght in cm
  double t = temp - 273.15;     // formula has t in celsius

  const double sigma = 1.25664e9;

  double einf = t * 0.0216474 + 5.27137 - t * t * 0.00131198;
  double alpha = -16.8129 / temp + 0.0609265;
  double brin = 2513.98 / temp;
  double als = exp(brin) * 3.3836e-4;

  t = t - 25;
  double eps = (1.0 - t * 0.004579 + t * t * 1.19e-5 -
                t * (t * t) * 2.8e-8) * 78.54;
  double slam = pow(als / calam, 1.0 - alpha);
  double sinal = sin(alpha * M_PI_2);
  double cosal = cos(alpha * M_PI_2);
  double x = slam * 2.0 * sinal + 1.0 + slam * slam;
  double reps = ((eps - einf) * (slam * sinal + 1.0)) / x + einf;
  double ieps = ((eps - einf) * slam * cosal) / x + sigma * calam / 1.88496e11;
  std::complex <double> res(reps, ieps);
  return res;
}

/* **************************************************************** 
 * Computes epsilon (e'+je'') for wet and dry snow.
 *
 * INPUT
 *
 * ICEOPT = 0 for dry-ice
 *          1 for porous-ice crystals
 *          2 for wet-ice first order Maxwell-Garnett
 *          3 for wet-ice Gunn-Marshall reported by Sauvageot
 * DENS   = ice density in g/m^3
 * FINCL  = Fraction of inclusions within the ice bulk
 * ALAM   = Wavelength in micron
 * PMBAR  = Pressure in Pa
 * Q      = Mixing ratio
 * TEMP   = Water temperature in K
 *
 * OUTPUT
 *       Relative complex dielectric constant
 *
 * IMAXORD= Maxwell-Garnett order
 *          f=1 first order
 *          f=2 second order
 *
 * **************************************************************** */

std::complex <double> cetemps::iceeps(int iceopt, double dens, double fincl,
              double alam, double p, double q, double t)
{
  alam = alam*1000.0; // All formulas has wl in micron

  const int imaxord = 2;

  /* Pure ice permittivity (Warren,82) */
   
  std::complex <double> icen = refice(alam, t);
  icen = pow(icen, 2);
  
  switch (iceopt)
  {
    case 0:
      /* Pure ice permittivity */
      return icen;
      break;
    case 1:
      /* Air-ice permittivity (first and second order Maxwell-Garnett) */
      {

        std::complex <double> airpc = aireps(alam, t, p, q);
        if (imaxord == 1)
        {
          std::complex <double> delta = (airpc-icen)/icen;
          return icen * (1.0 + fincl * delta);
        }
        else if (imaxord == 2)
        {
          std::complex <double> delta = (airpc-icen)/icen;
          return (icen * (1.0 + fincl * delta -
                  (fincl * (1.0 - fincl) / 3.0) * (pow(delta,2))));
        }
      }
      break;
    case 2:
      {
        /* Wet-ice permittivity (first order Maxwell-Garnett) */
        std::complex <double> watpc = cetemps::wateps(alam, t);
        return (watpc * fincl + icen * (1.0 - fincl));
      }
      break;
    case 3:
      {
        std::complex <double> watpc = cetemps::wateps(alam, t);
        double rhomix = fincl * 1.0 + (1 - fincl) * dens;
        return (rhomix * (watpc / (1.0 * fincl) + icen * (1 - fincl)));
      }
      break;
    default:
      return 0.0;
      break;
  }
  return 0.0;
}

/* ****************************************************************
 * Computes epsilon for air.
 * tk    = Water Temperature in K
 * pa    = Pressure in Pa
 * q     = Mixing ratio in Kg/Kg
 * returns relative complex dielectric constant
 * **************************************************************** */

std::complex <double> aireps(double alam, double tk, double pa, double q)
{
  double p = pa * 0.01;
  double es = t2es(tk);
  double e = w2e(q,p);

  double wlsq = alam * alam;
  double dcnr;
  if (alam <= 100.0)
    dcnr = ((77.532e-6+(4.391e-7+3.57e-9/wlsq)/wlsq)*p
        -11.2684e-6*es)/tk;
  else
    dcnr = (77.624e-6*p-(12.92e-6-0.371897/tk)*es)/tk;

  double ak = absgas(alam, p, e, tk);
  double ak0 = (2.0 * M_PI) / (alam*1e-5);
  double dcni = sqrt(ak / ak0);

  std::complex <double> retval(1.0+dcnr, dcni);
  return retval;
}

/* ****************************************************************
 *                     Pure-water refractive index
 * ****************************************************************
 *
 * Defines wavelength dependent complex index of refraction for water
 *
 * Allowable wavelength range extends from 0.2 microns to 10 cm
 * Temperature dependence only considered beyond 0.1 cm
 *
 * References
 *
 * 0.2 um - 0.69 um : Hale, G., and M. Querry: Optical constants
 *                    of water in the 200 nm to 200 um wavelength
 *                    region. Appl. Opt., 12, 3, 555-563 (1973).
 * 0.69 um - 2.0 um : Palmer, K.F., and D. Williams: Optical
 *                    properties of water in the near infrared.
 *                    J. Opt. Soc. Am., 64, 8, 1107-1110 (1974).
 * 2.0 um - 1.0 mm :  Downing, H.D., and D. Williams: Optical
 *                    constants of water in the infrared.
 *                    J. Geoph. Rev.,80,12, 1656-1661 (1975).
 * 1.0 mm - 10. cm :  Ray, P.S.: Broadband complex refractive
 *                    indices of ice and water.
 *                    Appl. Opt., 11, 8, 1836-1844 (1972).
 *
 * INPUT
 *
 * xlam  : wavelength microns
 * t     : temperature kelvin
 *
 * RETURN
 *
 * Refractive index
 *
 * rn     : real portion ( scattering )
 * cn     : complex portion ( absorption )
 *
 * **************************************************************** */

std::complex <double> refwat(double xlam, double t)
{
  const int numwat = 518;
  const double wlmin = .2;
  const double wlmax = 1e5;
  const double cutwat = 1e3;
  const double wltabw[518] = {
     .20000,    .22500,    .25000,    .27500,    .30000,    .32500,
     .35001,    .37500,    .40000,    .42501,    .45000,    .47499,
     .50000,    .52499,    .54999,    .57501,    .59999,    .62500,
     .64998,    .67499,    .68966,    .70175,    .71429,    .72464,
     .73529,    .74627,    .75188,    .75758,    .76923,    .78125,
     .79365,    .80645,    .81301,    .81967,    .83333,    .84746,
     .86207,    .87719,    .89286,    .90909,    .92593,    .93458,
     .94340,    .95238,    .96154,    .97276,    .98039,    .99010,
    1.00000,   1.01010,   1.02041,   1.03093,   1.04167,   1.05263,
    1.06952,   1.08696,   1.09890,   1.11111,   1.12360,   1.13636,
    1.14943,   1.16279,   1.17647,   1.19048,   1.20482,   1.21951,
    1.23457,   1.25000,   1.26582,   1.28205,   1.29870,   1.31579,
    1.33333,   1.35135,   1.36986,   1.38889,   1.40845,   1.42857,
    1.44300,   1.47059,   1.49254,   1.51515,   1.53846,   1.56250,
    1.58730,   1.61290,   1.63934,   1.66667,   1.69492,   1.72414,
    1.75439,   1.78571,   1.80180,   1.81818,   1.85185,   1.88679,
    1.92678,   1.96078,   2.00000,   2.02020,   2.04082,   2.06186,
    2.08333,   2.10526,   2.12766,   2.15054,   2.17391,   2.19780,
    2.22222,   2.24719,   2.27273,   2.29885,   2.32558,   2.35294,
    2.38095,   2.40964,   2.43902,   2.46914,   2.50000,   2.50627,
    2.51256,   2.51889,   2.52525,   2.53165,   2.53807,   2.54453,
    2.55102,   2.55754,   2.56410,   2.57069,   2.57732,   2.58398,
    2.59067,   2.59740,   2.60417,   2.61097,   2.61780,   2.62467,
    2.63158,   2.63852,   2.64550,   2.65252,   2.65957,   2.66667,
    2.67380,   2.68097,   2.68817,   2.69542,   2.70270,   2.71003,
    2.71739,   2.72480,   2.73224,   2.73973,   2.74725,   2.75482,
    2.76243,   2.77008,   2.77778,   2.78552,   2.79330,   2.80112,
    2.80899,   2.81690,   2.82486,   2.83286,   2.84091,   2.84900,
    2.85714,   2.86533,   2.87356,   2.88184,   2.89017,   2.89855,
    2.90698,   2.91545,   2.92398,   2.93255,   2.94118,   2.94985,
    2.95858,   2.96736,   2.97619,   2.98507,   2.99401,   3.00300,
    3.01205,   3.02115,   3.03030,   3.03951,   3.04878,   3.05810,
    3.06748,   3.07692,   3.08642,   3.09598,   3.10559,   3.11526,
    3.12500,   3.13480,   3.14465,   3.15457,   3.16456,   3.17460,
    3.18471,   3.19489,   3.20513,   3.21543,   3.22581,   3.23625,
    3.24675,   3.25733,   3.26797,   3.27869,   3.28947,   3.30033,
    3.31126,   3.32226,   3.33333,   3.34448,   3.35570,   3.36700,
    3.37838,   3.38983,   3.40136,   3.41297,   3.42466,   3.43643,
    3.44828,   3.46021,   3.47222,   3.48432,   3.49650,   3.50877,
    3.52113,   3.53357,   3.54610,   3.55872,   3.57143,   3.58423,
    3.59712,   3.61011,   3.62319,   3.63636,   3.64964,   3.66300,
    3.67647,   3.69004,   3.70370,   3.71747,   3.73134,   3.74532,
    3.75940,   3.77358,   3.78788,   3.80228,   3.81679,   3.83142,
    3.84615,   3.86100,   3.87597,   3.89105,   3.90625,   3.92157,
    3.93701,   3.95257,   3.96825,   3.98406,   4.00000,   4.01606,
    4.03226,   4.04858,   4.06504,   4.08163,   4.09836,   4.11523,
    4.13223,   4.14938,   4.16667,   4.18410,   4.20168,   4.21941,
    4.23729,   4.25532,   4.27350,   4.29185,   4.31034,   4.32900,
    4.34783,   4.36681,   4.38596,   4.40529,   4.42478,   4.44444,
    4.46429,   4.48430,   4.50450,   4.52489,   4.54545,   4.56621,
    4.58716,   4.60829,   4.62963,   4.65116,   4.67290,   4.69484,
    4.71698,   4.73934,   4.76190,   4.78469,   4.80769,   4.83092,
    4.85437,   4.87805,   4.90196,   4.92611,   4.95050,   4.97512,
    5.00000,   5.02513,   5.05051,   5.07614,   5.10204,   5.12821,
    5.15464,   5.18135,   5.20833,   5.23560,   5.26316,   5.29101,
    5.31915,   5.34759,   5.37634,   5.40541,   5.43478,   5.46448,
    5.49451,   5.52486,   5.55556,   5.58659,   5.61798,   5.64972,
    5.68182,   5.71429,   5.74713,   5.78035,   5.81395,   5.84795,
    5.88235,   5.91716,   5.95238,   5.98802,   6.02410,   6.06061,
    6.09756,   6.13497,   6.17284,   6.21118,   6.25000,   6.28931,
    6.32911,   6.36943,   6.41026,   6.45161,   6.49351,   6.53595,
    6.57895,   6.62252,   6.66667,   6.71141,   6.75676,   6.80272,
    6.84932,   6.89655,   6.94444,   6.99301,   7.04225,   7.09220,
    7.14286,   7.19424,   7.24638,   7.29927,   7.35294,   7.40741,
    7.46269,   7.51880,   7.57576,   7.63359,   7.69231,   7.75194,
    7.81250,   7.87402,   7.93651,   8.00000,   8.06452,   8.13008,
    8.19672,   8.26446,   8.33333,   8.40336,   8.47458,   8.54701,
    8.62069,   8.69565,   8.77193,   8.84956,   8.92857,   9.00901,
    9.09091,   9.17431,   9.25926,   9.34579,   9.43396,   9.52381,
    9.61538,   9.70874,   9.80392,   9.90099,  10.00000,  10.10101,
   10.20408,  10.30928,  10.41667,  10.52632,  10.63830,  10.75269,
   10.86957,  10.98901,  11.11111,  11.23596,  11.36364,  11.49425,
   11.62791,  11.76471,  11.90476,  12.04819,  12.19512,  12.34568,
   12.50000,  12.65823,  12.82051,  12.98701,  13.15789,  13.33333,
   13.51351,  13.69863,  13.88889,  14.08451,  14.28571,  14.49275,
   14.70588,  14.92537,  15.15152,  15.38462,  15.62500,  15.87302,
   16.12903,  16.39344,  16.66667,  16.94915,  17.24138,  17.54386,
   17.85714,  18.18182,  18.51852,  18.86792,  19.23077,  19.60784,
   20.00000,  20.40816,  20.83333,  21.27660,  21.73913,  22.22222,
   22.72727,  23.25581,  23.80952,  24.39024,  25.00000,  25.64103,
   26.31579,  27.02703,  27.77778,  28.57143,  29.41176,  30.30303,
   31.25000,  32.25806,  33.33333,  34.48276,  35.71429,  37.03704,
   38.46154,  40.00000,  41.66667,  43.47826,  45.45455,  47.61905,
   50.00000,  52.63158,  55.55556,  58.82353,  62.50000,  66.66667,
   71.42857,  76.92308,  83.33333,  90.90909, 100.00000, 111.11111,
  125.00000, 142.85714, 166.66667, 200.00000, 250.00000, 333.33333,
  500.00000,1000.00000 };
  const double rntabw[518] = {
     1.396,1.373,1.362,1.354,1.349,1.346,1.343,1.341,1.339,1.338,1.337,
     1.336,1.335,1.334,1.333,1.333,1.332,1.332,1.331,1.331,1.332,1.332,
     1.332,1.332,1.332,1.332,1.332,1.332,1.331,1.331,1.331,1.331,1.331,
     1.330,1.330,1.330,1.330,1.330,1.329,1.329,1.329,1.329,1.329,1.328,
     1.328,1.328,1.328,1.328,1.328,1.328,1.328,1.328,1.328,1.328,1.328,
     1.327,1.327,1.327,1.327,1.326,1.326,1.326,1.326,1.325,1.325,1.325,
     1.325,1.325,1.324,1.324,1.324,1.324,1.323,1.323,1.323,1.322,1.322,
     1.321,1.321,1.321,1.320,1.320,1.319,1.319,1.318,1.318,1.317,1.316,
     1.315,1.314,1.314,1.313,1.312,1.312,1.311,1.310,1.309,1.307,1.306,
     1.301,1.301,1.300,1.298,1.298,1.296,1.295,1.294,1.293,1.291,1.289,
     1.287,1.285,1.282,1.280,1.277,1.274,1.270,1.265,1.261,1.260,1.259,
     1.257,1.256,1.255,1.254,1.252,1.250,1.249,1.247,1.246,1.243,1.241,
     1.240,1.238,1.235,1.232,1.230,1.227,1.224,1.221,1.218,1.214,1.210,
     1.205,1.200,1.195,1.191,1.185,1.179,1.172,1.166,1.157,1.149,1.144,
     1.139,1.138,1.138,1.139,1.141,1.144,1.149,1.154,1.158,1.161,1.165,
     1.171,1.177,1.183,1.191,1.199,1.212,1.220,1.233,1.246,1.258,1.271,
     1.282,1.293,1.305,1.317,1.329,1.342,1.353,1.364,1.376,1.386,1.398,
     1.407,1.417,1.426,1.434,1.442,1.450,1.457,1.465,1.471,1.476,1.480,
     1.483,1.486,1.487,1.487,1.487,1.486,1.485,1.482,1.479,1.477,1.474,
     1.472,1.467,1.464,1.461,1.457,1.454,1.451,1.448,1.444,1.441,1.437,
     1.434,1.431,1.427,1.425,1.421,1.418,1.415,1.413,1.410,1.407,1.405,
     1.403,1.400,1.398,1.396,1.394,1.392,1.390,1.388,1.387,1.385,1.383,
     1.382,1.379,1.378,1.377,1.375,1.374,1.372,1.371,1.370,1.369,1.367,
     1.366,1.365,1.363,1.361,1.361,1.360,1.358,1.358,1.357,1.355,1.354,
     1.353,1.352,1.351,1.350,1.349,1.348,1.348,1.347,1.346,1.345,1.344,
     1.344,1.343,1.342,1.341,1.340,1.340,1.338,1.337,1.337,1.335,1.334,
     1.334,1.333,1.332,1.332,1.331,1.330,1.330,1.330,1.329,1.329,1.329,
     1.328,1.328,1.327,1.327,1.327,1.327,1.327,1.326,1.326,1.326,1.325,
     1.325,1.325,1.325,1.325,1.325,1.324,1.324,1.323,1.322,1.322,1.321,
     1.320,1.319,1.318,1.318,1.317,1.316,1.314,1.313,1.311,1.310,1.308,
     1.306,1.304,1.302,1.299,1.297,1.294,1.291,1.288,1.285,1.282,1.278,
     1.275,1.271,1.267,1.262,1.256,1.251,1.247,1.242,1.241,1.241,1.247,
     1.265,1.289,1.311,1.332,1.349,1.354,1.356,1.354,1.350,1.345,1.341,
     1.337,1.333,1.330,1.326,1.324,1.322,1.320,1.319,1.318,1.317,1.316,
     1.315,1.314,1.313,1.311,1.310,1.309,1.308,1.307,1.306,1.305,1.303,
     1.302,1.301,1.300,1.298,1.296,1.295,1.294,1.293,1.291,1.288,1.286,
     1.285,1.283,1.281,1.279,1.276,1.274,1.271,1.269,1.267,1.264,1.261,
     1.259,1.256,1.253,1.249,1.246,1.242,1.238,1.234,1.230,1.224,1.220,
     1.214,1.208,1.202,1.194,1.189,1.181,1.174,1.168,1.162,1.156,1.149,
     1.143,1.139,1.135,1.132,1.132,1.131,1.132,1.130,1.130,1.134,1.138,
     1.142,1.157,1.171,1.182,1.189,1.201,1.213,1.223,1.236,1.249,1.264,
     1.277,1.289,1.303,1.313,1.324,1.335,1.348,1.361,1.372,1.385,1.396,
     1.407,1.419,1.431,1.441,1.451,1.462,1.470,1.480,1.488,1.496,1.504,
     1.510,1.515,1.521,1.527,1.532,1.537,1.541,1.545,1.549,1.552,1.552,
     1.552,1.550,1.546,1.543,1.541,1.539,1.537,1.534,1.532,1.529,1.525,
     1.528,1.542,1.567,1.600,1.640,1.689,1.746,1.801,1.848,1.890,1.929,
     1.960,1.982,1.997,2.000,2.010,2.020,2.040,2.070,2.110,2.150,2.225,
     2.481 };
  const double cntabw[518] = {
     1.1000E-07,4.9000E-08,3.4000E-08,2.4000E-08,1.6000E-08,1.1000E-08,
     6.5000E-09,3.5000E-09,1.9000E-09,1.3000E-09,1.0000E-09,9.4000E-10,
     1.0000E-09,1.3000E-09,2.0000E-09,3.6000E-09,1.1000E-08,1.4000E-08,
     1.6000E-08,2.2000E-08,2.7000E-08,3.8000E-08,5.6000E-08,7.7300E-08,
     1.3900E-07,1.6300E-07,1.6800E-07,1.6400E-07,1.5400E-07,1.4300E-07,
     1.3300E-07,1.2500E-07,1.2400E-07,1.3000E-07,2.0400E-07,2.6100E-07,
     2.9400E-07,3.5300E-07,4.3300E-07,5.4300E-07,8.7700E-07,1.1800E-06,
     1.6100E-06,2.4400E-06,3.6000E-06,3.9800E-06,3.9200E-06,3.7000E-06,
     3.3100E-06,2.8200E-06,2.3100E-06,1.9000E-06,1.5700E-06,1.3700E-06,
     1.2600E-06,1.4400E-06,1.6800E-06,2.0500E-06,2.8900E-06,4.9600E-06,
     8.8700E-06,1.0900E-05,1.1500E-05,1.1800E-05,1.2000E-05,1.1800E-05,
     1.1500E-05,1.1000E-05,1.0800E-05,1.1500E-05,1.3800E-05,1.7500E-05,
     2.3900E-05,4.1600E-05,5.9400E-05,1.0100E-04,2.4100E-04,3.5200E-04,
     3.6400E-04,3.3400E-04,2.5800E-04,1.8800E-04,1.4800E-04,1.2000E-04,
     1.0200E-04,8.7300E-05,7.9200E-05,7.4900E-05,7.6200E-05,8.5500E-05,
     1.0600E-04,1.3000E-04,1.3600E-04,1.3700E-04,1.5900E-04,8.6300E-04,
     1.9000E-03,1.7000E-03,1.1000E-03,9.0000E-04,7.3100E-04,6.1700E-04,
     5.1400E-04,4.5200E-04,4.0000E-04,3.5900E-04,3.4100E-04,3.3800E-04,
     3.4500E-04,3.7600E-04,4.1600E-04,4.6500E-04,5.4200E-04,6.5200E-04,
     7.9200E-04,9.6800E-04,1.2300E-03,1.5600E-03,1.9000E-03,1.9500E-03,
     2.0000E-03,2.0500E-03,2.0700E-03,2.1000E-03,2.1200E-03,2.1500E-03,
     2.1900E-03,2.2400E-03,2.2700E-03,2.3100E-03,2.3400E-03,2.3900E-03,
     2.4300E-03,2.4800E-03,2.5700E-03,2.7000E-03,2.9800E-03,3.3000E-03,
     4.0200E-03,4.3700E-03,4.8200E-03,5.3600E-03,6.2700E-03,7.3200E-03,
     8.5500E-03,1.0500E-02,1.2700E-02,1.4500E-02,1.6400E-02,1.8600E-02,
     2.0500E-02,2.8200E-02,3.8000E-02,4.6200E-02,5.4800E-02,6.4900E-02,
     7.4400E-02,8.3600E-02,9.2700E-02,1.0200E-01,1.1200E-01,1.2100E-01,
     1.3100E-01,1.4200E-01,1.5400E-01,1.6700E-01,1.8000E-01,1.9400E-01,
     2.0600E-01,2.1800E-01,2.2900E-01,2.3900E-01,2.4900E-01,2.5800E-01,
     2.6500E-01,2.7100E-01,2.7600E-01,2.8000E-01,2.8100E-01,2.8200E-01,
     2.8200E-01,2.7900E-01,2.7600E-01,2.7200E-01,2.6700E-01,2.6200E-01,
     2.5500E-01,2.5000E-01,2.4300E-01,2.3600E-01,2.2800E-01,2.2000E-01,
     2.1200E-01,2.0400E-01,1.9500E-01,1.8300E-01,1.7300E-01,1.6300E-01,
     1.5300E-01,1.4400E-01,1.3400E-01,1.2500E-01,1.1700E-01,1.1000E-01,
     9.9400E-02,9.2000E-02,8.5500E-02,7.8500E-02,7.1600E-02,6.5300E-02,
     6.0000E-02,5.5000E-02,5.0400E-02,4.6200E-02,4.2200E-02,3.8500E-02,
     3.4800E-02,3.1500E-02,2.9700E-02,2.7900E-02,2.6200E-02,2.5000E-02,
     2.2900E-02,2.1000E-02,1.9300E-02,1.7700E-02,1.6300E-02,1.5100E-02,
     1.3800E-02,1.2800E-02,1.1800E-02,1.1000E-02,1.0100E-02,9.4100E-03,
     8.6600E-03,8.0700E-03,7.3700E-03,6.8300E-03,6.2500E-03,5.7900E-03,
     5.3800E-03,5.0600E-03,4.7300E-03,4.4900E-03,4.2400E-03,4.0500E-03,
     3.8900E-03,3.7600E-03,3.6300E-03,3.5500E-03,3.4700E-03,3.4000E-03,
     3.3500E-03,3.3600E-03,3.3500E-03,3.3900E-03,3.4000E-03,3.4800E-03,
     3.5200E-03,3.6300E-03,3.7000E-03,3.7800E-03,3.8900E-03,3.9900E-03,
     4.1000E-03,4.2200E-03,4.3300E-03,4.5000E-03,4.6500E-03,4.7900E-03,
     4.9400E-03,5.1200E-03,5.3100E-03,5.4900E-03,5.6800E-03,5.8600E-03,
     6.0800E-03,6.3100E-03,6.5300E-03,6.7300E-03,6.9600E-03,7.2200E-03,
     7.4900E-03,7.7900E-03,8.0600E-03,8.3300E-03,8.6400E-03,8.9600E-03,
     9.2700E-03,9.6600E-03,1.0000E-02,1.0400E-02,1.0800E-02,1.1200E-02,
     1.1700E-02,1.2200E-02,1.2600E-02,1.3100E-02,1.3600E-02,1.4000E-02,
     1.4500E-02,1.4900E-02,1.5200E-02,1.5400E-02,1.5600E-02,1.5700E-02,
     1.5700E-02,1.5700E-02,1.5500E-02,1.5300E-02,1.5100E-02,1.4800E-02,
     1.4600E-02,1.4300E-02,1.4000E-02,1.3700E-02,1.3300E-02,1.2900E-02,
     1.2600E-02,1.2200E-02,1.1800E-02,1.1500E-02,1.1000E-02,1.0800E-02,
     1.0500E-02,1.0300E-02,1.0100E-02,1.0000E-02,9.9300E-03,9.9000E-03,
     9.9500E-03,1.0000E-02,1.0200E-02,1.0400E-02,1.0700E-02,1.1000E-02,
     1.1500E-02,1.2000E-02,1.2800E-02,1.3800E-02,1.5000E-02,1.6600E-02,
     1.8500E-02,2.0500E-02,2.4200E-02,2.9300E-02,3.3200E-02,4.2900E-02,
     5.4400E-02,6.8800E-02,8.4000E-02,1.0210E-01,1.1700E-01,1.3000E-01,
     1.3200E-01,1.2400E-01,1.0600E-01,8.8000E-02,7.4000E-02,6.1800E-02,
     5.3500E-02,4.8400E-02,4.4700E-02,4.2000E-02,3.9800E-02,3.8300E-02,
     3.7300E-02,3.7000E-02,3.6600E-02,3.6300E-02,3.6000E-02,3.5700E-02,
     3.5500E-02,3.5200E-02,3.5000E-02,3.4700E-02,3.4600E-02,3.4300E-02,
     3.4200E-02,3.4200E-02,3.4200E-02,3.4300E-02,3.4200E-02,3.4200E-02,
     3.4200E-02,3.4200E-02,3.4200E-02,3.4400E-02,3.4500E-02,3.4600E-02,
     3.4900E-02,3.5100E-02,3.5100E-02,3.5100E-02,3.5200E-02,3.5600E-02,
     3.5900E-02,3.6100E-02,3.6200E-02,3.6600E-02,3.7000E-02,3.7400E-02,
     3.7800E-02,3.8300E-02,3.8700E-02,3.9200E-02,3.9800E-02,4.0500E-02,
     4.1100E-02,4.1700E-02,4.2400E-02,4.3400E-02,4.4300E-02,4.5300E-02,
     4.6700E-02,4.8100E-02,4.9700E-02,5.1500E-02,5.3400E-02,5.5700E-02,
     5.8900E-02,6.2200E-02,6.6100E-02,7.0700E-02,7.6400E-02,8.2800E-02,
     8.9800E-02,9.7300E-02,1.0700E-01,1.1800E-01,1.3000E-01,1.4400E-01,
     1.5900E-01,1.7600E-01,1.9200E-01,2.0800E-01,2.2600E-01,2.4300E-01,
     2.6000E-01,2.7700E-01,2.9200E-01,3.0500E-01,3.1700E-01,3.2800E-01,
     3.3800E-01,3.4700E-01,3.5600E-01,3.6500E-01,3.7300E-01,3.7900E-01,
     3.8600E-01,3.9200E-01,3.9700E-01,4.0300E-01,4.0800E-01,4.1200E-01,
     4.1700E-01,4.2000E-01,4.2300E-01,4.2500E-01,4.2700E-01,4.2800E-01,
     4.2700E-01,4.2700E-01,4.2600E-01,4.2500E-01,4.2300E-01,4.2100E-01,
     4.1800E-01,4.1500E-01,4.1100E-01,4.0800E-01,4.0400E-01,4.0100E-01,
     3.9700E-01,3.9400E-01,3.9000E-01,3.8600E-01,3.8200E-01,3.7700E-01,
     3.7200E-01,3.6800E-01,3.6300E-01,3.5900E-01,3.5600E-01,3.5200E-01,
     3.5300E-01,3.5700E-01,3.6100E-01,3.6800E-01,3.7500E-01,3.8500E-01,
     3.9800E-01,4.1400E-01,4.3600E-01,4.6900E-01,5.0500E-01,5.3900E-01,
     5.7100E-01,5.9700E-01,6.1800E-01,6.2900E-01,6.2200E-01,6.0800E-01,
     5.9300E-01,5.7700E-01,5.5700E-01,5.3200E-01,5.0700E-01,4.8700E-01,
     4.6600E-01,4.5000E-01,4.4400E-01,4.3800E-01,4.6000E-01,5.2700E-01,
     7.1800E-01,8.4657E-01 };

  /* CHECK FOR WAVELENGTH REGION */

  if (xlam < wlmin || xlam > wlmax)
  {
    std::cerr << " Wavelength wl = " << xlam << " micron is out of bounds"
              << " (" << wlmin << ", " << wlmax << ")" << std::endl;
    throw ("ERROR");
  }

  if (xlam <= cutwat)
  {

    /* ******* region from 0.2 micron to 1000.0 micron - table lookup */

    int i;
    for (i = 1; i < numwat; ++i)
    {
      if (xlam <= wltabw[i]) break;
    }
    int i1 = i - 1;
    int i2 = i;
    double fac = (xlam - wltabw[i1]) / (wltabw[i2] - wltabw[i1]);
    double rn = rntabw[i1] + fac * (rntabw[i2] - rntabw[i1]);
    double cn = cntabw[i1] + fac * (cntabw[i2] - cntabw[i1]);
    std::complex <double> retval(rn, cn);
    return retval;
  }
  else
  {

    /* ******* Region from 0.1 cm to 10 cm
     *  Extension of Debye theory based on the work of
     *  Cole, K.S., and R.H. Cole: Jour. Chem. Phys., 9, 341 (1941). */

    /*  Define temperature terms and wavelength in cm */

    double tc = t - 273.15;
    double t1 = tc + 273.;
    double t2 = tc - 25.;
    double xl = xlam / 1e4;

    /*  sigma : frequency independent conductivity
     *    See : Saxton, J.A.: Wireless Engineer, 26, 288 (1949).
     *  alpha : spread parameter
     *    See : Ray ( equation 7b ) */

    /* N.B.: in classical Debye theorey these terms are zero */

    const double sigma = 1.25664e9;
    const double alpha = -16.8129 / t1 + .0609265;

    /* es    : static dielectric constant - Ray eqn 4 */
    /*   temperature dependence of es given by */
    /*   Wyman ,J. and E.N. Ingalls: Jour. Am. Chem. Soc., 60, 1182 (1938). */
    /* e00   : high frequency dielectric constant - Ray eqn 7a */
    /* xlams : relaxtion wavelength in cm - Ray eqn 7c */

    double es = 78.54 * (1.0 - t2 * 0.004579 + t2 * t2 * 1.19e-5 -
                         2.8e-8 * t2 * t2 *t2);
    double e00 = 5.27137 + tc * 0.0216474 - tc * tc * 0.00131198;
    double xlams = exp(2513.98 / t1) * 3.3836e-4;

    /* e  : dielectric constant */
    /* er : real part - Ray eqn 5 */
    /* ei : imaginary part or loss term - Ray eqn 6 */
    /* m  : refractive index - Ray eqn 1 */

    double term = M_PI * alpha / 2;
    double sint = sin(term);
    double cost = cos(term);
    double xlrat = xlams / xl;
    double powtrm = pow(xlrat, 1 - alpha);
    double denom = powtrm * 2 * sint + 1. + pow(xlrat, (1 - alpha) * 2.0);
    double er = e00 + (es - e00) * (powtrm * sint + 1.) / denom;
    double ei = sigma * xl / 1.88496e11 + (es - e00) * powtrm * cost / denom;
    std::complex <double> e(er, ei);
    std::complex <double> retval = sqrt(e);

    /* Correction to imaginary index to account for the remaining */
    /* absorption bands - Ray eqn 8(table 2) */

    if (xlam <= 3e3)
    {
      double cn = sum_debye(xlam, 17.0, 0.39, 0.45, 1.3) + 
                  sum_debye(xlam, 62.0, 0.41, 0.35, 1.7) + 
                  sum_debye(xlam, 300.0, 0.25, 0.47, 3.0);
      std::complex <double> corr(0.0, cn);
      retval += corr;
    }
    return retval;
  }

  return 0.0;
}

/* ****************************************************************
 *                  Pure-ice refractive index
 * ****************************************************************
 *
 * Defines wavelength dependent complex index of refraction for ice.
 *
 * Allowable wavelength range extends from 0.045 microns to 8.6 meters.
 * Temperature dependence only considered beyond 167 microns.
 *
 * Interpolation is done     rn  vs. log(xlam)
 *                           rn  vs.        t
 *                       log(cn) vs. log(xlam)
 *                       log(cn) vs.        t
 *
 * Reference
 *
 * Warren, S.G.: Optical constants of ice from the ultraviolet to
 *               the microwave.  Appl. Opt., 23, 1206-1225 (1984).
 *
 * INPUT
 *
 * xlam  : wavelength microns
 * t     : temperature Kelvin
 *
 * RETURN
 *
 * Refractive index
 *
 * rn     : real portion ( scattering )
 * cn     : complex portion ( absorption )
 *
 * **************************************************************** */
std::complex <double> refice(double xlam, double t)
{
  const double temref[4] = { 272.16, 268.16, 253.16, 213.16 };
  const double wlmin = 0.045;
  const double wlmax = 8.6e6;
  const double cutice = 167.0;
  const double wl[468] = { 
     0.4430E-01,0.4510E-01,0.4590E-01,0.4680E-01,0.4770E-01,0.4860E-01,
     0.4960E-01,0.5060E-01,0.5170E-01,0.5280E-01,0.5390E-01,0.5510E-01,
     0.5640E-01,0.5770E-01,0.5900E-01,0.6050E-01,0.6200E-01,0.6360E-01,
     0.6530E-01,0.6700E-01,0.6890E-01,0.7080E-01,0.7290E-01,0.7380E-01,
     0.7510E-01,0.7750E-01,0.8000E-01,0.8270E-01,0.8550E-01,0.8860E-01,
     0.9180E-01,0.9300E-01,0.9540E-01,0.9920E-01,0.1033E+00,0.1078E+00,
     0.1100E+00,0.1127E+00,0.1140E+00,0.1181E+00,0.1210E+00,0.1240E+00,
     0.1272E+00,0.1295E+00,0.1305E+00,0.1319E+00,0.1333E+00,0.1348E+00,
     0.1362E+00,0.1370E+00,0.1378E+00,0.1387E+00,0.1393E+00,0.1409E+00,
     0.1425E+00,0.1435E+00,0.1442E+00,0.1450E+00,0.1459E+00,0.1468E+00,
     0.1476E+00,0.1480E+00,0.1485E+00,0.1494E+00,0.1512E+00,0.1531E+00,
     0.1540E+00,0.1550E+00,0.1569E+00,0.1580E+00,0.1589E+00,0.1610E+00,
     0.1625E+00,0.1648E+00,0.1669E+00,0.1692E+00,0.1713E+00,0.1737E+00,
     0.1757E+00,0.1779E+00,0.1802E+00,0.1809E+00,0.1821E+00,0.1833E+00,
     0.1843E+00,0.1850E+00,0.1860E+00,0.1870E+00,0.1880E+00,0.1890E+00,
     0.1900E+00,0.1910E+00,0.1930E+00,0.1950E+00,0.2100E+00,0.2500E+00,
     0.3000E+00,0.3500E+00,0.4000E+00,0.4100E+00,0.4200E+00,0.4300E+00,
     0.4400E+00,0.4500E+00,0.4600E+00,0.4700E+00,0.4800E+00,0.4900E+00,
     0.5000E+00,0.5100E+00,0.5200E+00,0.5300E+00,0.5400E+00,0.5500E+00,
     0.5600E+00,0.5700E+00,0.5800E+00,0.5900E+00,0.6000E+00,0.6100E+00,
     0.6200E+00,0.6300E+00,0.6400E+00,0.6500E+00,0.6600E+00,0.6700E+00,
     0.6800E+00,0.6900E+00,0.7000E+00,0.7100E+00,0.7200E+00,0.7300E+00,
     0.7400E+00,0.7500E+00,0.7600E+00,0.7700E+00,0.7800E+00,0.7900E+00,
     0.8000E+00,0.8100E+00,0.8200E+00,0.8300E+00,0.8400E+00,0.8500E+00,
     0.8600E+00,0.8700E+00,0.8800E+00,0.8900E+00,0.9000E+00,0.9100E+00,
     0.9200E+00,0.9300E+00,0.9400E+00,0.9500E+00,0.9600E+00,0.9700E+00,
     0.9800E+00,0.9900E+00,0.1000E+01,0.1010E+01,0.1020E+01,0.1030E+01,
     0.1040E+01,0.1050E+01,0.1060E+01,0.1070E+01,0.1080E+01,0.1090E+01,
     0.1100E+01,0.1110E+01,0.1120E+01,0.1130E+01,0.1140E+01,0.1150E+01,
     0.1160E+01,0.1170E+01,0.1180E+01,0.1190E+01,0.1200E+01,0.1210E+01,
     0.1220E+01,0.1230E+01,0.1240E+01,0.1250E+01,0.1260E+01,0.1270E+01,
     0.1280E+01,0.1290E+01,0.1300E+01,0.1310E+01,0.1320E+01,0.1330E+01,
     0.1340E+01,0.1350E+01,0.1360E+01,0.1370E+01,0.1380E+01,0.1390E+01,
     0.1400E+01,0.1410E+01,0.1420E+01,0.1430E+01,0.1440E+01,0.1449E+01,
     0.1460E+01,0.1471E+01,0.1481E+01,0.1493E+01,0.1504E+01,0.1515E+01,
     0.1527E+01,0.1538E+01,0.1563E+01,0.1587E+01,0.1613E+01,0.1650E+01,
     0.1680E+01,0.1700E+01,0.1730E+01,0.1760E+01,0.1800E+01,0.1830E+01,
     0.1840E+01,0.1850E+01,0.1855E+01,0.1860E+01,0.1870E+01,0.1890E+01,
     0.1905E+01,0.1923E+01,0.1942E+01,0.1961E+01,0.1980E+01,0.2000E+01,
     0.2020E+01,0.2041E+01,0.2062E+01,0.2083E+01,0.2105E+01,0.2130E+01,
     0.2150E+01,0.2170E+01,0.2190E+01,0.2220E+01,0.2240E+01,0.2245E+01,
     0.2250E+01,0.2260E+01,0.2270E+01,0.2290E+01,0.2310E+01,0.2330E+01,
     0.2350E+01,0.2370E+01,0.2390E+01,0.2410E+01,0.2430E+01,0.2460E+01,
     0.2500E+01,0.2520E+01,0.2550E+01,0.2565E+01,0.2580E+01,0.2590E+01,
     0.2600E+01,0.2620E+01,0.2675E+01,0.2725E+01,0.2778E+01,0.2817E+01,
     0.2833E+01,0.2849E+01,0.2865E+01,0.2882E+01,0.2899E+01,0.2915E+01,
     0.2933E+01,0.2950E+01,0.2967E+01,0.2985E+01,0.3003E+01,0.3021E+01,
     0.3040E+01,0.3058E+01,0.3077E+01,0.3096E+01,0.3115E+01,0.3135E+01,
     0.3155E+01,0.3175E+01,0.3195E+01,0.3215E+01,0.3236E+01,0.3257E+01,
     0.3279E+01,0.3300E+01,0.3322E+01,0.3345E+01,0.3367E+01,0.3390E+01,
     0.3413E+01,0.3436E+01,0.3460E+01,0.3484E+01,0.3509E+01,0.3534E+01,
     0.3559E+01,0.3624E+01,0.3732E+01,0.3775E+01,0.3847E+01,0.3969E+01,
     0.4099E+01,0.4239E+01,0.4348E+01,0.4387E+01,0.4444E+01,0.4505E+01,
     0.4547E+01,0.4560E+01,0.4580E+01,0.4719E+01,0.4904E+01,0.5000E+01,
     0.5100E+01,0.5200E+01,0.5263E+01,0.5400E+01,0.5556E+01,0.5714E+01,
     0.5747E+01,0.5780E+01,0.5814E+01,0.5848E+01,0.5882E+01,0.6061E+01,
     0.6135E+01,0.6250E+01,0.6289E+01,0.6329E+01,0.6369E+01,0.6410E+01,
     0.6452E+01,0.6494E+01,0.6579E+01,0.6667E+01,0.6757E+01,0.6897E+01,
     0.7042E+01,0.7143E+01,0.7246E+01,0.7353E+01,0.7463E+01,0.7576E+01,
     0.7692E+01,0.7812E+01,0.7937E+01,0.8065E+01,0.8197E+01,0.8333E+01,
     0.8475E+01,0.8696E+01,0.8929E+01,0.9091E+01,0.9259E+01,0.9524E+01,
     0.9804E+01,0.1000E+02,0.1020E+02,0.1031E+02,0.1042E+02,0.1053E+02,
     0.1064E+02,0.1075E+02,0.1087E+02,0.1100E+02,0.1111E+02,0.1136E+02,
     0.1163E+02,0.1190E+02,0.1220E+02,0.1250E+02,0.1282E+02,0.1299E+02,
     0.1316E+02,0.1333E+02,0.1351E+02,0.1370E+02,0.1389E+02,0.1408E+02,
     0.1429E+02,0.1471E+02,0.1515E+02,0.1538E+02,0.1563E+02,0.1613E+02,
     0.1639E+02,0.1667E+02,0.1695E+02,0.1724E+02,0.1818E+02,0.1887E+02,
     0.1923E+02,0.1961E+02,0.2000E+02,0.2041E+02,0.2083E+02,0.2222E+02,
     0.2260E+02,0.2305E+02,0.2360E+02,0.2460E+02,0.2500E+02,0.2600E+02,
     0.2857E+02,0.3100E+02,0.3333E+02,0.3448E+02,0.3564E+02,0.3700E+02,
     0.3824E+02,0.3960E+02,0.4114E+02,0.4276E+02,0.4358E+02,0.4458E+02,
     0.4550E+02,0.4615E+02,0.4671E+02,0.4736E+02,0.4800E+02,0.4878E+02,
     0.5003E+02,0.5128E+02,0.5275E+02,0.5350E+02,0.5424E+02,0.5500E+02,
     0.5574E+02,0.5640E+02,0.5700E+02,0.5746E+02,0.5840E+02,0.5929E+02,
     0.6000E+02,0.6100E+02,0.6125E+02,0.6250E+02,0.6378E+02,0.6467E+02,
     0.6558E+02,0.6655E+02,0.6760E+02,0.6900E+02,0.7053E+02,0.7300E+02,
     0.7500E+02,0.7629E+02,0.8000E+02,0.8297E+02,0.8500E+02,0.8680E+02,
     0.9080E+02,0.9517E+02,0.1000E+03,0.1200E+03,0.1500E+03,0.1670E+03 };
  const double wlt[62] = { 
     0.1670E+03,0.1778E+03,0.1884E+03,0.1995E+03,0.2113E+03,0.2239E+03,
     0.2371E+03,0.2512E+03,0.2661E+03,0.2818E+03,0.2985E+03,0.3162E+03,
     0.3548E+03,0.3981E+03,0.4467E+03,0.5012E+03,0.5623E+03,0.6310E+03,
     0.7943E+03,0.1000E+04,0.1259E+04,0.2500E+04,0.5000E+04,0.1000E+05,
     0.2000E+05,0.3200E+05,0.3500E+05,0.4000E+05,0.4500E+05,0.5000E+05,
     0.6000E+05,0.7000E+05,0.9000E+05,0.1110E+06,0.1200E+06,0.1300E+06,
     0.1400E+06,0.1500E+06,0.1600E+06,0.1700E+06,0.1800E+06,0.2000E+06,
     0.2500E+06,0.2900E+06,0.3200E+06,0.3500E+06,0.3800E+06,0.4000E+06,
     0.4500E+06,0.5000E+06,0.6000E+06,0.6400E+06,0.6800E+06,0.7200E+06,
     0.7600E+06,0.8000E+06,0.8400E+06,0.9000E+06,0.1000E+07,0.2000E+07,
     0.5000E+07,0.8600E+07 };
  const double tabre[468] = {
     0.83441,   0.83676,   0.83729,   0.83771,   0.83827,   0.84038,
     0.84719,   0.85522,   0.86047,   0.86248,   0.86157,   0.86093,
     0.86419,   0.86916,   0.87764,   0.89296,   0.91041,   0.93089,
     0.95373,   0.98188,   1.02334,   1.06735,   1.11197,   1.13134,
     1.15747,   1.20045,   1.23840,   1.27325,   1.32157,   1.38958,
     1.41644,   1.40906,   1.40063,   1.40169,   1.40934,   1.40221,
     1.39240,   1.38424,   1.38075,   1.38186,   1.39634,   1.40918,
     1.40256,   1.38013,   1.36303,   1.34144,   1.32377,   1.30605,
     1.29054,   1.28890,   1.28931,   1.30190,   1.32025,   1.36302,
     1.41872,   1.45834,   1.49028,   1.52128,   1.55376,   1.57782,
     1.59636,   1.60652,   1.61172,   1.61919,   1.62522,   1.63404,
     1.63689,   1.63833,   1.63720,   1.63233,   1.62222,   1.58269,
     1.55635,   1.52453,   1.50320,   1.48498,   1.47226,   1.45991,
     1.45115,   1.44272,   1.43498,   1.43280,   1.42924,   1.42602,
     1.42323,   1.42143,   1.41897,   1.41660,   1.41434,   1.41216,
     1.41006,   1.40805,   1.40423,   1.40067,   1.38004,   1.35085,
     1.33394,   1.32492,   1.31940,   1.31854,   1.31775,   1.31702,
     1.31633,   1.31569,   1.31509,   1.31452,   1.31399,   1.31349,
     1.31302,   1.31257,   1.31215,   1.31175,   1.31136,   1.31099,
     1.31064,   1.31031,   1.30999,   1.30968,   1.30938,   1.30909,
     1.30882,   1.30855,   1.30829,   1.30804,   1.30780,   1.30756,
     1.30733,   1.30710,   1.30688,   1.30667,   1.30646,   1.30625,
     1.30605,   1.30585,   1.30566,   1.30547,   1.30528,   1.30509,
     1.30491,   1.30473,   1.30455,   1.30437,   1.30419,   1.30402,
     1.30385,   1.30367,   1.30350,   1.30333,   1.30316,   1.30299,
     1.30283,   1.30266,   1.30249,   1.30232,   1.30216,   1.30199,
     1.30182,   1.30166,   1.30149,   1.30132,   1.30116,   1.30099,
     1.30082,   1.30065,   1.30048,   1.30031,   1.30014,   1.29997,
     1.29979,   1.29962,   1.29945,   1.29927,   1.29909,   1.29891,
     1.29873,   1.29855,   1.29837,   1.29818,   1.29800,   1.29781,
     1.29762,   1.29743,   1.29724,   1.29705,   1.29686,   1.29666,
     1.29646,   1.29626,   1.29605,   1.29584,   1.29563,   1.29542,
     1.29521,   1.29499,   1.29476,   1.29453,   1.29430,   1.29406,
     1.29381,   1.29355,   1.29327,   1.29299,   1.29272,   1.29252,
     1.29228,   1.29205,   1.29186,   1.29167,   1.29150,   1.29130,
     1.29106,   1.29083,   1.29025,   1.28962,   1.28891,   1.28784,
     1.28689,   1.28623,   1.28521,   1.28413,   1.28261,   1.28137,
     1.28093,   1.28047,   1.28022,   1.27998,   1.27948,   1.27849,
     1.27774,   1.27691,   1.27610,   1.27535,   1.27471,   1.27404,
     1.27329,   1.27240,   1.27139,   1.27029,   1.26901,   1.26736,
     1.26591,   1.26441,   1.26284,   1.26036,   1.25860,   1.25815,
     1.25768,   1.25675,   1.25579,   1.25383,   1.25179,   1.24967,
     1.24745,   1.24512,   1.24266,   1.24004,   1.23725,   1.23270,
     1.22583,   1.22198,   1.21548,   1.21184,   1.20790,   1.20507,
     1.20209,   1.19566,   1.17411,   1.14734,   1.10766,   1.06739,
     1.04762,   1.02650,   1.00357,   0.98197,   0.96503,   0.95962,
     0.97269,   0.99172,   1.00668,   1.02186,   1.04270,   1.07597,
     1.12954,   1.21267,   1.32509,   1.42599,   1.49656,   1.55095,
     1.59988,   1.63631,   1.65024,   1.64278,   1.62691,   1.61284,
     1.59245,   1.57329,   1.55770,   1.54129,   1.52654,   1.51139,
     1.49725,   1.48453,   1.47209,   1.46125,   1.45132,   1.44215,
     1.43366,   1.41553,   1.39417,   1.38732,   1.37735,   1.36448,
     1.35414,   1.34456,   1.33882,   1.33807,   1.33847,   1.34053,
     1.34287,   1.34418,   1.34634,   1.34422,   1.33453,   1.32897,
     1.32333,   1.31800,   1.31432,   1.30623,   1.29722,   1.28898,
     1.28730,   1.28603,   1.28509,   1.28535,   1.28813,   1.30156,
     1.30901,   1.31720,   1.31893,   1.32039,   1.32201,   1.32239,
     1.32149,   1.32036,   1.31814,   1.31705,   1.31807,   1.31953,
     1.31933,   1.31896,   1.31909,   1.31796,   1.31631,   1.31542,
     1.31540,   1.31552,   1.31455,   1.31193,   1.30677,   1.29934,
     1.29253,   1.28389,   1.27401,   1.26724,   1.25990,   1.24510,
     1.22241,   1.19913,   1.17150,   1.15528,   1.13700,   1.11808,
     1.10134,   1.09083,   1.08734,   1.09254,   1.10654,   1.14779,
     1.20202,   1.25825,   1.32305,   1.38574,   1.44478,   1.47170,
     1.49619,   1.51652,   1.53328,   1.54900,   1.56276,   1.57317,
     1.58028,   1.57918,   1.56672,   1.55869,   1.55081,   1.53807,
     1.53296,   1.53220,   1.53340,   1.53289,   1.51705,   1.50097,
     1.49681,   1.49928,   1.50153,   1.49856,   1.49053,   1.46070,
     1.45182,   1.44223,   1.43158,   1.41385,   1.40676,   1.38955,
     1.34894,   1.31039,   1.26420,   1.23656,   1.21663,   1.20233,
     1.19640,   1.19969,   1.20860,   1.22173,   1.24166,   1.28175,
     1.32784,   1.38657,   1.46486,   1.55323,   1.60379,   1.61877,
     1.62963,   1.65712,   1.69810,   1.72065,   1.74865,   1.76736,
     1.76476,   1.75011,   1.72327,   1.68490,   1.62398,   1.59596,
     1.58514,   1.59917,   1.61405,   1.66625,   1.70663,   1.73713,
     1.76860,   1.80343,   1.83296,   1.85682,   1.87411,   1.89110,
     1.89918,   1.90432,   1.90329,   1.88744,   1.87499,   1.86702,
     1.85361,   1.84250,   1.83225,   1.81914,   1.82268,   1.82961 };
  static double tabret[248]  = {
     1.82961,   1.83258,   1.83149,   1.82748,   1.82224,   1.81718,
     1.81204,   1.80704,   1.80250,   1.79834,   1.79482,   1.79214,
     1.78843,   1.78601,   1.78434,   1.78322,   1.78248,   1.78201,
     1.78170,   1.78160,   1.78190,   1.78300,   1.78430,   1.78520,
     1.78620,   1.78660,   1.78680,   1.78690,   1.78700,   1.78700,
     1.78710,   1.78710,   1.78720,   1.78720,   1.78720,   1.78720,
     1.78720,   1.78720,   1.78720,   1.78720,   1.78720,   1.78720,
     1.78720,   1.78720,   1.78720,   1.78720,   1.78720,   1.78720,
     1.78720,   1.78720,   1.78720,   1.78720,   1.78720,   1.78720,
     1.78720,   1.78720,   1.78720,   1.78720,   1.78720,   1.78720,
     1.78720,   1.78800,   1.82961,   1.83258,   1.83149,   1.82748,
     1.82224,   1.81718,   1.81204,   1.80704,   1.80250,   1.79834,
     1.79482,   1.79214,   1.78843,   1.78601,   1.78434,   1.78322,
     1.78248,   1.78201,   1.78170,   1.78160,   1.78190,   1.78300,
     1.78430,   1.78520,   1.78610,   1.78630,   1.78640,   1.78650,
     1.78650,   1.78650,   1.78650,   1.78650,   1.78650,   1.78650,
     1.78650,   1.78650,   1.78650,   1.78650,   1.78650,   1.78650,
     1.78650,   1.78650,   1.78650,   1.78650,   1.78650,   1.78650,
     1.78650,   1.78650,   1.78650,   1.78650,   1.78650,   1.78650,
     1.78650,   1.78650,   1.78650,   1.78650,   1.78650,   1.78650,
     1.78650,   1.78650,   1.78650,   1.78720,   1.82961,   1.83258,
     1.83149,   1.82748,   1.82224,   1.81718,   1.81204,   1.80704,
     1.80250,   1.79834,   1.79482,   1.79214,   1.78843,   1.78601,
     1.78434,   1.78322,   1.78248,   1.78201,   1.78160,   1.78140,
     1.78160,   1.78220,   1.78310,   1.78380,   1.78390,   1.78400,
     1.78400,   1.78400,   1.78400,   1.78400,   1.78390,   1.78380,
     1.78370,   1.78370,   1.78370,   1.78370,   1.78370,   1.78370,
     1.78370,   1.78370,   1.78370,   1.78370,   1.78370,   1.78370,
     1.78370,   1.78370,   1.78370,   1.78370,   1.78370,   1.78370,
     1.78370,   1.78370,   1.78370,   1.78370,   1.78370,   1.78370,
     1.78370,   1.78370,   1.78370,   1.78370,   1.78400,   1.78450,
     1.82961,   1.83258,   1.83149,   1.82748,   1.82224,   1.81718,
     1.81204,   1.80704,   1.80250,   1.79834,   1.79482,   1.79214,
     1.78843,   1.78601,   1.78434,   1.78322,   1.78248,   1.78201,
     1.78150,   1.78070,   1.78010,   1.77890,   1.77790,   1.77730,
     1.77720,   1.77720,   1.77720,   1.77720,   1.77720,   1.77720,
     1.77720,   1.77720,   1.77720,   1.77720,   1.77720,   1.77720,
     1.77720,   1.77720,   1.77720,   1.77720,   1.77720,   1.77720,
     1.77720,   1.77720,   1.77720,   1.77720,   1.77720,   1.77720,
     1.77720,   1.77720,   1.77720,   1.77720,   1.77720,   1.77720,
     1.77720,   1.77720,   1.77720,   1.77720,   1.77720,   1.77720,
     1.77720,   1.77800 };
  static double tabim[468] = {
     0.1640E+00,0.1730E+00,0.1830E+00,0.1950E+00,0.2080E+00,0.2230E+00,
     0.2400E+00,0.2500E+00,0.2590E+00,0.2680E+00,0.2790E+00,0.2970E+00,
     0.3190E+00,0.3400E+00,0.3660E+00,0.3920E+00,0.4160E+00,0.4400E+00,
     0.4640E+00,0.4920E+00,0.5170E+00,0.5280E+00,0.5330E+00,0.5340E+00,
     0.5310E+00,0.5240E+00,0.5100E+00,0.5000E+00,0.4990E+00,0.4680E+00,
     0.3800E+00,0.3600E+00,0.3390E+00,0.3180E+00,0.2910E+00,0.2510E+00,
     0.2440E+00,0.2390E+00,0.2390E+00,0.2440E+00,0.2470E+00,0.2240E+00,
     0.1950E+00,0.1740E+00,0.1720E+00,0.1800E+00,0.1940E+00,0.2130E+00,
     0.2430E+00,0.2710E+00,0.2890E+00,0.3340E+00,0.3440E+00,0.3820E+00,
     0.4010E+00,0.4065E+00,0.4050E+00,0.3890E+00,0.3770E+00,0.3450E+00,
     0.3320E+00,0.3150E+00,0.2980E+00,0.2740E+00,0.2280E+00,0.1980E+00,
     0.1720E+00,0.1560E+00,0.1100E+00,0.8300E-01,0.5800E-01,0.2200E-01,
     0.1000E-01,0.3000E-02,0.1000E-02,0.3000E-03,0.1000E-03,0.3000E-04,
     0.1000E-04,0.3000E-05,0.1000E-05,0.7000E-06,0.4000E-06,0.2000E-06,
     0.1000E-06,0.6377E-07,0.3750E-07,0.2800E-07,0.2400E-07,0.2200E-07,
     0.1900E-07,0.1750E-07,0.1640E-07,0.1590E-07,0.1325E-07,0.8623E-08,
     0.5504E-08,0.3765E-08,0.2710E-08,0.2510E-08,0.2260E-08,0.2080E-08,
     0.1910E-08,0.1540E-08,0.1530E-08,0.1550E-08,0.1640E-08,0.1780E-08,
     0.1910E-08,0.2140E-08,0.2260E-08,0.2540E-08,0.2930E-08,0.3110E-08,
     0.3290E-08,0.3520E-08,0.4040E-08,0.4880E-08,0.5730E-08,0.6890E-08,
     0.8580E-08,0.1040E-07,0.1220E-07,0.1430E-07,0.1660E-07,0.1890E-07,
     0.2090E-07,0.2400E-07,0.2900E-07,0.3440E-07,0.4030E-07,0.4300E-07,
     0.4920E-07,0.5870E-07,0.7080E-07,0.8580E-07,0.1020E-06,0.1180E-06,
     0.1340E-06,0.1400E-06,0.1430E-06,0.1450E-06,0.1510E-06,0.1830E-06,
     0.2150E-06,0.2650E-06,0.3350E-06,0.3920E-06,0.4200E-06,0.4440E-06,
     0.4740E-06,0.5110E-06,0.5530E-06,0.6020E-06,0.7550E-06,0.9260E-06,
     0.1120E-05,0.1330E-05,0.1620E-05,0.2000E-05,0.2250E-05,0.2330E-05,
     0.2330E-05,0.2170E-05,0.1960E-05,0.1810E-05,0.1740E-05,0.1730E-05,
     0.1700E-05,0.1760E-05,0.1820E-05,0.2040E-05,0.2250E-05,0.2290E-05,
     0.3040E-05,0.3840E-05,0.4770E-05,0.5760E-05,0.6710E-05,0.8660E-05,
     0.1020E-04,0.1130E-04,0.1220E-04,0.1290E-04,0.1320E-04,0.1350E-04,
     0.1330E-04,0.1320E-04,0.1320E-04,0.1310E-04,0.1320E-04,0.1320E-04,
     0.1340E-04,0.1390E-04,0.1420E-04,0.1480E-04,0.1580E-04,0.1740E-04,
     0.1980E-04,0.2500E-04,0.5400E-04,0.1040E-03,0.2030E-03,0.2708E-03,
     0.3511E-03,0.4299E-03,0.5181E-03,0.5855E-03,0.5899E-03,0.5635E-03,
     0.5480E-03,0.5266E-03,0.4394E-03,0.3701E-03,0.3372E-03,0.2410E-03,
     0.1890E-03,0.1660E-03,0.1450E-03,0.1280E-03,0.1030E-03,0.8600E-04,
     0.8220E-04,0.8030E-04,0.8500E-04,0.9900E-04,0.1500E-03,0.2950E-03,
     0.4687E-03,0.7615E-03,0.1010E-02,0.1313E-02,0.1539E-02,0.1588E-02,
     0.1540E-02,0.1412E-02,0.1244E-02,0.1068E-02,0.8414E-03,0.5650E-03,
     0.4320E-03,0.3500E-03,0.2870E-03,0.2210E-03,0.2030E-03,0.2010E-03,
     0.2030E-03,0.2140E-03,0.2320E-03,0.2890E-03,0.3810E-03,0.4620E-03,
     0.5480E-03,0.6180E-03,0.6800E-03,0.7300E-03,0.7820E-03,0.8480E-03,
     0.9250E-03,0.9200E-03,0.8920E-03,0.8700E-03,0.8900E-03,0.9300E-03,
     0.1010E-02,0.1350E-02,0.3420E-02,0.7920E-02,0.2000E-01,0.3800E-01,
     0.5200E-01,0.6800E-01,0.9230E-01,0.1270E+00,0.1690E+00,0.2210E+00,
     0.2760E+00,0.3120E+00,0.3470E+00,0.3880E+00,0.4380E+00,0.4930E+00,
     0.5540E+00,0.6120E+00,0.6250E+00,0.5930E+00,0.5390E+00,0.4910E+00,
     0.4380E+00,0.3720E+00,0.3000E+00,0.2380E+00,0.1930E+00,0.1580E+00,
     0.1210E+00,0.1030E+00,0.8360E-01,0.6680E-01,0.5400E-01,0.4220E-01,
     0.3420E-01,0.2740E-01,0.2200E-01,0.1860E-01,0.1520E-01,0.1260E-01,
     0.1060E-01,0.8020E-02,0.6850E-02,0.6600E-02,0.6960E-02,0.9160E-02,
     0.1110E-01,0.1450E-01,0.2000E-01,0.2300E-01,0.2600E-01,0.2900E-01,
     0.2930E-01,0.3000E-01,0.2850E-01,0.1730E-01,0.1290E-01,0.1200E-01,
     0.1250E-01,0.1340E-01,0.1400E-01,0.1750E-01,0.2400E-01,0.3500E-01,
     0.3800E-01,0.4200E-01,0.4600E-01,0.5200E-01,0.5700E-01,0.6900E-01,
     0.7000E-01,0.6700E-01,0.6500E-01,0.6400E-01,0.6200E-01,0.5900E-01,
     0.5700E-01,0.5600E-01,0.5500E-01,0.5700E-01,0.5800E-01,0.5700E-01,
     0.5500E-01,0.5500E-01,0.5400E-01,0.5200E-01,0.5200E-01,0.5200E-01,
     0.5200E-01,0.5000E-01,0.4700E-01,0.4300E-01,0.3900E-01,0.3700E-01,
     0.3900E-01,0.4000E-01,0.4200E-01,0.4400E-01,0.4500E-01,0.4600E-01,
     0.4700E-01,0.5100E-01,0.6500E-01,0.7500E-01,0.8800E-01,0.1080E+00,
     0.1340E+00,0.1680E+00,0.2040E+00,0.2480E+00,0.2800E+00,0.3410E+00,
     0.3790E+00,0.4090E+00,0.4220E+00,0.4220E+00,0.4030E+00,0.3890E+00,
     0.3740E+00,0.3540E+00,0.3350E+00,0.3150E+00,0.2940E+00,0.2710E+00,
     0.2460E+00,0.1980E+00,0.1640E+00,0.1520E+00,0.1420E+00,0.1280E+00,
     0.1250E+00,0.1230E+00,0.1160E+00,0.1070E+00,0.7900E-01,0.7200E-01,
     0.7600E-01,0.7500E-01,0.6700E-01,0.5500E-01,0.4500E-01,0.2900E-01,
     0.2750E-01,0.2700E-01,0.2730E-01,0.2890E-01,0.3000E-01,0.3400E-01,
     0.5300E-01,0.7550E-01,0.1060E+00,0.1350E+00,0.1761E+00,0.2229E+00,
     0.2746E+00,0.3280E+00,0.3906E+00,0.4642E+00,0.5247E+00,0.5731E+00,
     0.6362E+00,0.6839E+00,0.7091E+00,0.6790E+00,0.6250E+00,0.5654E+00,
     0.5433E+00,0.5292E+00,0.5070E+00,0.4883E+00,0.4707E+00,0.4203E+00,
     0.3771E+00,0.3376E+00,0.3056E+00,0.2835E+00,0.3170E+00,0.3517E+00,
     0.3902E+00,0.4509E+00,0.4671E+00,0.4779E+00,0.4890E+00,0.4899E+00,
     0.4873E+00,0.4766E+00,0.4508E+00,0.4193E+00,0.3880E+00,0.3433E+00,
     0.3118E+00,0.2935E+00,0.2350E+00,0.1981E+00,0.1865E+00,0.1771E+00,
     0.1620E+00,0.1490E+00,0.1390E+00,0.1200E+00,0.9620E-01,0.8300E-01 };
  static double tabimt[248]  = {
     0.8300E-01,0.6900E-01,0.5700E-01,0.4560E-01,0.3790E-01,0.3140E-01,
     0.2620E-01,0.2240E-01,0.1960E-01,0.1760E-01,0.1665E-01,0.1620E-01,
     0.1550E-01,0.1470E-01,0.1390E-01,0.1320E-01,0.1250E-01,0.1180E-01,
     0.1060E-01,0.9540E-02,0.8560E-02,0.6210E-02,0.4490E-02,0.3240E-02,
     0.2340E-02,0.1880E-02,0.1740E-02,0.1500E-02,0.1320E-02,0.1160E-02,
     0.8800E-03,0.6950E-03,0.4640E-03,0.3400E-03,0.3110E-03,0.2940E-03,
     0.2790E-03,0.2700E-03,0.2640E-03,0.2580E-03,0.2520E-03,0.2490E-03,
     0.2540E-03,0.2640E-03,0.2740E-03,0.2890E-03,0.3050E-03,0.3150E-03,
     0.3460E-03,0.3820E-03,0.4620E-03,0.5000E-03,0.5500E-03,0.5950E-03,
     0.6470E-03,0.6920E-03,0.7420E-03,0.8200E-03,0.9700E-03,0.1950E-02,
     0.5780E-02,0.9700E-02,0.8300E-01,0.6900E-01,0.5700E-01,0.4560E-01,
     0.3790E-01,0.3140E-01,0.2620E-01,0.2240E-01,0.1960E-01,0.1760E-01,
     0.1665E-01,0.1600E-01,0.1500E-01,0.1400E-01,0.1310E-01,0.1230E-01,
     0.1150E-01,0.1080E-01,0.9460E-02,0.8290E-02,0.7270E-02,0.4910E-02,
     0.3300E-02,0.2220E-02,0.1490E-02,0.1140E-02,0.1060E-02,0.9480E-03,
     0.8500E-03,0.7660E-03,0.6300E-03,0.5200E-03,0.3840E-03,0.2960E-03,
     0.2700E-03,0.2520E-03,0.2440E-03,0.2360E-03,0.2300E-03,0.2280E-03,
     0.2250E-03,0.2200E-03,0.2160E-03,0.2170E-03,0.2200E-03,0.2250E-03,
     0.2320E-03,0.2390E-03,0.2600E-03,0.2860E-03,0.3560E-03,0.3830E-03,
     0.4150E-03,0.4450E-03,0.4760E-03,0.5080E-03,0.5400E-03,0.5860E-03,
     0.6780E-03,0.1280E-02,0.3550E-02,0.5600E-02,0.8300E-01,0.6900E-01,
     0.5700E-01,0.4560E-01,0.3790E-01,0.3140E-01,0.2620E-01,0.2190E-01,
     0.1880E-01,0.1660E-01,0.1540E-01,0.1470E-01,0.1350E-01,0.1250E-01,
     0.1150E-01,0.1060E-01,0.9770E-02,0.9010E-02,0.7660E-02,0.6520E-02,
     0.5540E-02,0.3420E-02,0.2100E-02,0.1290E-02,0.7930E-03,0.5700E-03,
     0.5350E-03,0.4820E-03,0.4380E-03,0.4080E-03,0.3500E-03,0.3200E-03,
     0.2550E-03,0.2120E-03,0.2000E-03,0.1860E-03,0.1750E-03,0.1660E-03,
     0.1560E-03,0.1490E-03,0.1440E-03,0.1350E-03,0.1210E-03,0.1160E-03,
     0.1160E-03,0.1170E-03,0.1200E-03,0.1230E-03,0.1320E-03,0.1440E-03,
     0.1680E-03,0.1800E-03,0.1900E-03,0.2090E-03,0.2160E-03,0.2290E-03,
     0.2400E-03,0.2600E-03,0.2920E-03,0.6100E-03,0.1020E-02,0.1810E-02,
     0.8300E-01,0.6900E-01,0.5700E-01,0.4450E-01,0.3550E-01,0.2910E-01,
     0.2440E-01,0.1970E-01,0.1670E-01,0.1400E-01,0.1235E-01,0.1080E-01,
     0.8900E-02,0.7340E-02,0.6400E-02,0.5600E-02,0.5000E-02,0.4520E-02,
     0.3680E-02,0.2990E-02,0.2490E-02,0.1550E-02,0.9610E-03,0.5950E-03,
     0.3690E-03,0.2670E-03,0.2510E-03,0.2290E-03,0.2110E-03,0.1960E-03,
     0.1730E-03,0.1550E-03,0.1310E-03,0.1130E-03,0.1060E-03,0.9900E-04,
     0.9300E-04,0.8730E-04,0.8300E-04,0.7870E-04,0.7500E-04,0.6830E-04,
     0.5600E-04,0.4960E-04,0.4550E-04,0.4210E-04,0.3910E-04,0.3760E-04,
     0.3400E-04,0.3100E-04,0.2640E-04,0.2510E-04,0.2430E-04,0.2390E-04,
     0.2370E-04,0.2380E-04,0.2400E-04,0.2460E-04,0.2660E-04,0.4450E-04,
     0.8700E-04,0.1320E-03 };

  /* CHECK FOR WAVELENGTH REGION */

  if (xlam < wlmin || xlam > wlmax)
  {
    std::cerr << " Wavelength wl = " << xlam << " micron is out of bounds"
              << " (" << wlmin << ", " << wlmax << ")" << std::endl;
    throw ("ERROR");
  }

  if (xlam <= cutice)
  {

    /* ******* Region from 0.045 microns to 167.0 microns */
    /*         no temperature dependence                  */

    int i;
    for (i = 1; i < 468; ++i)
    {
      if (xlam < wl[i]) break;
    }
    double x1 = log(wl[i - 1]);
    double x2 = log(wl[i]);
    double y1 = tabre[i - 1];
    double y2 = tabre[i];
    double x = log(xlam);
    double rn = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    y1 = log(fabs(tabim[i - 1]));
    y2 = log(fabs(tabim[i]));
    double cn = exp((x - x1) * (y2 - y1) / (x2 - x1) + y1);
    std::complex <double> retval(rn, cn);
    return retval;
  }
  else
  {

    /* ******* Region from 167.0 microns to 8.6 meters 
     *         temperature dependence */

    double tk = t;
    if (t > temref[0]) {
      tk = temref[0];
    }
    if (tk < temref[3]) {
      tk = temref[3];
    }
    int i;
    for (i = 1; i < 4; ++i)
      if (tk >= temref[i]) break;
    int lt1 = i;
    int lt2 = i-1;
    for (i = 1; i < 62; ++i)
      if (xlam <= wlt[i - 1]) break;
    double x1 = log(wlt[i - 1]);
    double x2 = log(wlt[i]);
    double y1 = tabret[i - 1 + lt1 * 62];
    double y2 = tabret[i + lt1 * 62];
    double x = log(xlam);
    double ylo = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    y1 = tabret[i - 1 + lt2 * 62];
    y2 = tabret[i + lt2 * 62];
    double yhi = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    double t1 = temref[lt1];
    double t2 = temref[lt2];
    double rn = (tk - t1) * (yhi - ylo) / (t2 - t1) + ylo;
    y1 = log(fabs(tabimt[i - 1 + lt1 * 62]));
    y2 = log(fabs(tabimt[i + lt1 * 62]));
    ylo = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    y1 = log(fabs(tabimt[i - 1 + lt2 * 62]));
    y2 = log(fabs(tabimt[i + lt2 * 62]));
    yhi = (x - x1) * (y2 - y1) / (x2 - x1) + y1;
    double cn = exp((tk - t1) * (yhi - ylo) / (t2 - t1) + ylo);
    std::complex <double> retval(rn, cn);
    return retval;
  }

  return 0;
}

/* ****************************************************************
 * Treating absorption bands not considered in the
 * Debye theory
 * **************************************************************** */
inline double sum_debye(double wl, double wlcen, double bet,
                        double del, double gam)
{
  return (bet * exp(-pow((fabs(log10(wl/wlcen)/del)), gam)));
}

/* ****************************************************************
 *                         ABSGAS
 * ****************************************************************
 *
 * Calculates the combined volume absorption coefficient for
 * oxygen and water vapor within the microwave spectrum. See:
 *
 * References: [1] H.J. LIEBE,"An updated model for millimeter
 *                wave propagation in moist air", Radio Science,
 *                vol. 20 No. 5, 1985 pp. 1069-1089
 *
 *             [2] H.J. LIEBE,"Relative-Humidity Parameterization
 *                for Atmospheric Millimeter Wave Propagation
 *                Modeling" , Open Symposium on Wave Propagation
 *                and Remote Sensing, July 28 - August 1, 1986,
 *                Univ. of New Hampshire, Durham, New Hampshire.
 *
 * Input parameters
 *
 * lam = wavelenght in microns (from 300 microns on)
 * prs = dry air pressure (mb - 1010 to 1)
 * e   = water vapor pressure (mb - 0 to 6)
 * t   = temperature (kelvin - 310 to 175)
 *
 * OUTPUT PARAMETERS
 *
 * ABSGAS = ABSORPTION COEFFICIENT (1/KM)
 *
 * **************************************************************** */

double absgas(double l, double p, double e, double t)
{
  double f = (299792.458/l); // We want frequency in GHz

  const double f0o2[48] = {
    49.452379, 49.962257, 50.474238, 50.987748, 51.503350, 52.021409,
    52.542393, 53.066906, 53.595748, 54.129999, 54.671157, 55.221365,
    55.783800, 56.264777, 56.363387, 56.968180, 57.612481, 58.323874,
    58.446589, 59.164204, 59.590982, 60.306057, 60.434775, 61.150558,
    61.800152, 62.411212, 62.486253, 62.997974, 63.568515, 64.127764,
    64.678900, 65.224067, 65.764769, 66.302088, 66.836827, 67.369595,
    67.900862, 68.431001, 68.960306, 69.489021, 70.017342,118.750341,
   368.498350,424.763120,487.249370,715.393150,773.838730,834.145330 };
  const double a[288]  = { 
    0.120,   0.340,   0.940,   2.460,   6.080,  14.140,  31.020,  64.100,
  124.700, 228.000, 391.800, 631.600, 953.500, 548.900,1344.000,1763.000,
 2141.000,2386.000,1457.000,2404.000,2112.000,2124.000,2461.000,2504.000,
 2298.000,1933.000,1517.000,1503.000,1087.000, 733.500, 463.500, 274.800,
  153.000,  80.090,  39.460,  18.320,   8.010,   3.300,   1.280,   0.470,
    0.160, 945.000,  67.900, 638.000, 235.000,  99.600, 671.000, 180.000,
   11.830,  10.720,   9.690,   8.690,   7.740,   6.840,   6.000,   5.220,
    4.480,   3.810,   3.190,   2.620,   2.115,   0.010,   1.655,   1.255,
    0.910,   0.621,   0.079,   0.386,   0.207,   0.207,   0.386,   0.621,
    0.910,   1.255,   0.078,   1.660,   2.110,   2.620,   3.190,   3.810,
    4.480,   5.220,   6.000,   6.840,   7.740,   8.690,   9.690,  10.720,
   11.830,   0.000,   0.020,   0.011,   0.011,   0.089,   0.079,   0.079,
    8.400,   8.500,   8.600,   8.700,   8.900,   9.200,   9.400,   9.700,
   10.000,  10.200,  10.500,  10.790,  11.100,  16.460,  11.440,  11.810,
   12.210,  12.660,  14.490,  13.190,  13.600,  13.820,  12.970,  12.480,
   12.070,  11.710,  14.680,  11.390,  11.080,  10.780,  10.500,  10.200,
   10.000,   9.700,   9.400,   9.200,   8.900,   8.700,   8.600,   8.500,
    8.400,  16.300,  19.200,  19.160,  19.200,  18.100,  18.100,  18.100,
    6.700,   6.700,   6.700,   6.700,   6.685,   6.403,   6.099,   5.772,
    5.454,   5.206,   4.814,   4.363,   4.105,   2.812,   4.154,   3.548,
    1.122,   0.051,   6.201,  -4.174,   6.853,  -6.254,   3.341,  -1.308,
   -2.059,  -4.325,  -4.052,  -4.726,  -4.538,  -4.711,  -5.105,  -5.451,
   -5.663,  -5.948,  -6.246,  -6.522,  -6.775,  -6.700,  -6.700,  -6.700,
   -6.700,  -0.244,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,
    1.700,   1.700,   1.700,   1.700,   1.700,   1.700,   1.800,   1.800,
    1.900,   1.900,   1.900,   2.000,   2.000,   0.800,   2.000,   2.100,
    3.400,   6.000,   0.600,   0.100,   0.400,   0.400,   0.100,   2.700,
    2.300,   2.000,   0.600,   2.000,   2.000,   2.000,   1.900,   1.900,
    1.800,   1.800,   1.700,   1.700,   1.700,   1.700,   1.700,   1.700,
    1.700,   0.800,   1.000,   1.000,   1.000,   1.000,   1.000,   1.000,
    0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,
    0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,
    0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,
    0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,
    0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,
    0.000,   0.000,   0.600,   0.600,   0.600,   0.600,   0.600,   0.600 };
  const double f0wat[30] = {
     22.235080, 67.813960,119.995940,183.310117,321.225644,325.152919,
    336.187000,380.197372,390.134508,437.346667,439.150812,443.018295,
    448.001075,470.888947,474.689127,488.491133,503.568532,504.482692,
    556.936002,620.700807,658.006500,752.033227,841.073593,859.865000,
    899.407000,902.555000,906.205524,916.171582,970.315022,987.926764 };
  const double b[90]= {
   0.1090,  0.0011,  0.0007,  2.3000,  0.0464,  1.5400,  0.0010, 11.9000,
   0.0044,  0.0637,  0.9210,  0.1940, 10.6000,  0.3300,  1.2800,  0.2530,
   0.0374,  0.0125,510.0000,  5.0900,  0.2740,250.0000,  0.0130,  0.1330,
   0.0550,  0.0380,  0.1830,  8.5600,  9.1600,138.0000,
   2.1430,  8.7300,  8.3470,  0.6530,  6.1560,  1.5150,  9.8020,  1.0180,
   7.3180,  5.0150,  3.5610,  5.0150,  1.3700,  3.5610,  2.3420,  2.8140,
   6.6930,  6.6930,  0.1140,  2.1500,  7.7670,  0.3360,  8.1130,  7.9890,
   7.8450,  8.3600,  5.0390,  1.3690,  1.8420,  0.1780,
  27.8400, 27.6000, 27.0000, 31.6400, 21.4000, 29.7000, 26.5000, 30.3600,
  19.0000, 13.7000, 16.4000, 14.4000, 23.8000, 18.2000, 19.8000, 24.9000,
  11.5000, 11.9000, 30.0000, 22.3000, 30.0000, 28.6000, 14.1000, 28.6000,
  28.6000, 26.4000, 23.4000, 25.3000, 24.0000, 28.6000 };

  double v = 300.0 / t;
  if (f < 1e-6) f = 1e-6;

  double s[48], gamma[48], delta[48];
  for (int i = 0; i < 48; ++i)
  {
    s[i]     = a[i] * p * (v * (v * v)) * exp(a[i+48] * (1.0 - v)) * 1e-6;
    gamma[i] = a[i+2*48] * (p * pow(v, 0.8 - a[i+5*48]) + e * 1.1 * v) * 0.001;
    delta[i] = a[i+3*48] * p * pow(v, a[i+4*48]) * 0.001;
  }

  double sh[30], gamh[30];
  for (int i = 0; i < 30; ++i)
  {
    sh[i]   = b[i] * e * pow(v, 3.5) * exp(b[i+30] * (1. - v));
     gamh[i] = b[i+2*30] * (p * pow(v, 0.6) + e * 4.8 * pow(v, 1.1)) * 0.001;
  }

  const double bf = 1.13e-6;
  const double bs = 3.57e-5;
  double nipp = (bf * e * p * pow(v, 3.0) + bs * (e * e) * pow( v, 10.8)) * f;

  const double ao = 6.14e-4;
  double an = (1. - pow(f, 1.5) * 1.2e-5) * 1.4e-10;
  double gammao = (p + e * 1.1) * .0048 * pow(v, 0.8);
  const double fac = 1.;
  double ndpp = (ao * p * (v * v) * gammao * fac / (f * f + gammao * gammao) 
                + an * p * p * pow(v, 3.5)) * f;

  double s1 = 0.;
  for (int i = 0; i < 48; ++i)
    s1 += s[i] * fppfp3(f, f0o2[i], gamma[i], delta[i]);
  double noxpp = s1;

  s1 = 0.;
  for (int i = 0; i < 30; ++i)
    s1 += sh[i] * fppfp3(f, f0wat[i], gamh[i], 0.0);
  double nvpp = s1;

  double ad[4];
  ad[0] = f * 0.182 * noxpp; if (ad[0] < 0.0) ad[0] = 0.0;
  ad[1] = f * 0.182 * ndpp;
  ad[2] = f * 0.182 * nvpp;
  ad[3] = f * 0.182 * nipp;
  return ((ad[0] + ad[1] + ad[2] + ad[3]) * 0.23026);
}

/* ****************************************************************
 * CALC Fpp  -- VW line shape functions
 * **************************************************************** */
inline double fppfp3(double f, double vo, double gamma, double delta)
{
  double g2 = gamma * gamma;
  double vmf = vo - f;
  double vpf = vo + f;
  return (f / vo * ( (gamma - vmf * delta) / (vmf * vmf + g2)
                    +(gamma - vpf * delta) / (vpf * vpf + g2)));
}

inline double t2es(double t) // Input temperature in K, output in mbar
{
  if (t > 273.15)
    return(exp(-5800.2206/t+1.3914993-.048640239*t+(.41764768e-4)*pow(t,2.0)
           -(0.14452093e-7)*pow(t,3.0)+6.5459673*log(t))/100.0);
  else
    return(exp(-5674.5359/t+6.3925247-(0.9677843e-2)*t+(0.62215701e-6)*
          pow(t,2.0)+(0.20747825e-8)*pow(t,3.0)-(0.9484024e-12)*pow(t,4.0)+
           4.1635019*log(t))/100.0);
}

inline double w2e(double w, double p) {
    return (p*w/(0.62198+w));
}

std::complex <double> cetemps::refindex(std::complex <double> eps)
{
  double epsr = real(eps);
  double epsi = imag(eps);
  double mrr = sqrt((epsr+sqrt((epsr*epsr)+(epsi*epsi)))/2.0);
  double mri = epsi/(2.0*mrr);
  std::complex <double> retval(mrr, mri);
  return retval;
}

double cetemps::KappaSquare(std::complex <double> rindx)
{
  double mrr = real(rindx);
  double mri = imag(rindx);
  return (pow(((mrr*mrr)-(mri*mri)-1), 2) + pow((2*mrr*mri), 2)) /
         (pow(((mrr*mrr)-(mri*mri)+2), 2) + pow((2*mrr*mri), 2));
}

#ifdef TESTME

#include <iostream>

int main(int argc, char *argv[])
{
  double alam = 25.0;
  double temp = 283.15;
  std::complex <double> a = wateps(alam, temp);
  std::cout << a << std::endl;

  double l = 29979;
  double p = 950;
  double e = 8;
  double t = 288;
  std::cout << "ABSGAS : " << absgas(l, p, e, t) << std::endl;
  std::cout << refice(500, 288) << std::endl;
  std::cout << refice(100, 288) << std::endl;
  std::cout << refwat(500, 288) << std::endl;
  std::cout << refwat(1500, 288) << std::endl;
  a = aireps(49.0, 288, 95000, 0.00553789);
  std::cout << a << std::endl;

  return 0;
}

#endif
